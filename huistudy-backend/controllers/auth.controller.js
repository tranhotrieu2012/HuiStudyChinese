const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const AuthModel = require("../models/auth.model");
const { sendResetEmail } = require("../utils/mail.util");

// --------------- Register ---------------
exports.register = async (req, res) => {
  const { email, password, full_name, role } = req.body;
  try {
    const existing = await AuthModel.findUserByEmail(email);
    if (existing) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });

    const hash = await bcrypt.hash(password, 10);
    const user_id = await AuthModel.createUser({
      email,
      password_hash: hash,
      full_name,
    });

    const role_id = await AuthModel.getRoleByName(role);
    if (!role_id)
      return res.status(400).json({ message: "Vai tr√≤ kh√¥ng h·ª£p l·ªá" });

    await AuthModel.assignUserRole(user_id, role_id);

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error });
  }
};

// --------------- Login ---------------
exports.login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await AuthModel.findUserByEmail(email);
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const valid = await bcrypt.compare(password, user.password_hash);
    if (!valid) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });

    const token = jwt.sign(
      { user_id: user.id, role: user.role_id },
      process.env.JWT_SECRET,
      { expiresIn: "7d" }
    );

    res.json({
      token,
      user: { id: user.id, email: user.email, full_name: user.full_name },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error });
  }
};
// --------------- Get me ---------------
exports.getMe = async (req, res) => {
  try {
    const user = await AuthModel.getUserById(req.user.user_id);
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    res.json({ user });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error });
  }
};

// --------------- Forgot password ---------------
exports.forgotPassword = async (req, res) => {
  const { email } = req.body;
  try {
    const user = await AuthModel.findUserByEmail(email);
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i." });

    const token = await AuthModel.createPasswordResetToken(user.id);
    await sendResetEmail(email, token);

    res.json({ message: "ƒê√£ g·ª≠i email kh√¥ng ph·ª•c m·∫≠t kh·∫©u." });
  } catch (error) {
    console.error("[ForgotPassword Error]", error); // üëà log ra terminal
    res.status(500).json({ message: "L·ªói server ", error: error });
  }
};

// --------------- Reset password ---------------
exports.resetPassword = async (req, res) => {
  const { token, newPassword } = req.body;
  try {
    const record = await AuthModel.verifyResetToken(token);
    if (!record)
      return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá." });

    const hash = await bcrypt.hash(newPassword, 10);
    await AuthModel.updateUserPassword(record.user_id, hash);
    await AuthModel.markResetUsed(record.id);

    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server ", error: error });
  }
};
